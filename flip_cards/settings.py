"""
Django settings for anki project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
# генератор секретного ключа DJANGO_SECRET_KEY - python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'

from pathlib import Path
import os
from dotenv import load_dotenv
from django.utils.translation import gettext_lazy as _
from logging.handlers import RotatingFileHandler

load_dotenv()  # Загружает переменные окружения из файла .env, который находится в той же директории, что и settings.py


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'True'

ALLOWED_HOSTS = ['flip-cards.ru', 'www.flip-cards.ru', 'localhost',
                 '127.0.0.1', '176.124.215.68', 'demek07-flip-cards-f779.twc1.net']

CSRF_TRUSTED_ORIGINS = ['https://flip-cards.ru', 'https://www.flip-cards.ru']

if DEBUG:
    INTERNAL_IPS = [
        '127.0.0.1',
    ]

# Application definition


INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'debug_toolbar',
    'flip_cards_app',
    # "allauth_themes.bootstrap",
    # "allauth_ui",
    # 'allauth',
    # 'allauth.account',
    "widget_tweaks",
    # "slippers",
    'users',
    # 'sslserver',
]

# ALLAUTH_UI_THEME = "corporate"

# Админпанель
JAZZMIN_UI_TWEAKS = {
    "theme": "litera",
    "sticky_actions": True,
    "actions_sticky_top": True,
}

JAZZMIN_SETTINGS = {
    # "site_title": "Название сайта",
    # "site_brand": "Название сайта",
    "show_ui_builder": True,
    "changeform_format": "carousel",
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    # 'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'flip_cards.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',  # Папка с шаблонами
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 'libraries': {
            #     'mytags': 'config.template_tags',
            #     }
        },
    },
]

# LOCALE_PATHS = [
#     Path(__file__).parent.parent / "allauth_ui" / "locale",
# ]
# LANGUAGES = (
#     ("ru", _("Russian")),
# )

WSGI_APPLICATION = 'flip_cards.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'dict.db',
#     }
# }

# Postgresql команды:
# удаление базы  данных - psql -U postgres -c "DROP DATABASE dict_db"
# создание базы данных - psql -U postgres -c "CREATE DATABASE dict_db WITH ENCODING 'UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8' TEMPLATE=template0"
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'dict_db',
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PWD'),
        'HOST': 'localhost',
        'PORT': '5432',
        'OPTIONS': {
            'client_encoding': 'UTF8'
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# LOGIN_URL = 'account_login'
LOGIN_URL = 'users:login'
LOGOUT_REDIRECT_URL = "/"
LOGIN_REDIRECT_URL = "/"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Стандартный бекенд для аутентификации по username
    'users.authentication.EmailAuthBackend',      # Наш кастомный бекенд для аутентификации по email
    # 'allauth.account.auth_backends.AuthenticationBackend',
]

AUTH_USER_MODEL = 'users.User'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = os.getenv('EMAIL_HOST_USER')
SERVER_EMAIL = os.getenv('EMAIL_HOST_USER')
EMAIL_ADMIN = os.getenv('EMAIL_HOST_USER')

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YOUR_PERSONAL_CHAT_ID = os.getenv("YOUR_PERSONAL_CHAT_ID")

URL_FOR_VOICE = os.getenv("URL_FOR_VOICE")
API_WORDNIK = os.getenv("API_WORDNIK")

API_DICTIONARYAPI = os.getenv("API_DICTIONARYAPI")

# Настройки для активации аккаунта по email
EMAIL_ACTIVATION_TIMEOUT_DAYS = 7  # Срок действия ссылки активации (в днях)


# ALLAUTH_UI_THEME = "corporate"

# ACCOUNT_AUTHENTICATION_METHOD = "username_email"  # (default: "username", alternatives: "email" or "username_email")
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {'file': {
#         'level': 'DEBUG',
#         'class': 'logging.handlers.RotatingFileHandler',
#         'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
#         'maxBytes': 1024*1024*5,  # Максимальный размер файла - 5 MB
#         'backupCount': 5,          # Хранить до 5 архивных файлов
#         'formatter': 'verbose',
#     },
#     },
#     'formatters': {'verbose': {
#         'format': '{levelname} {asctime} {module} {message}',
#         'style': '{',
#     },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }
